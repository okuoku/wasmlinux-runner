set(vmlinuxa ${CMAKE_CURRENT_LIST_DIR}/../vmlinux.a)
set(output "${CMAKE_CURRENT_LIST_DIR}/initsyms.gen.c")

execute_process(
    COMMAND llvm-nm --defined-only --format=just-symbols ${vmlinuxa}
    OUTPUT_VARIABLE syms
    RESULT_VARIABLE rr)

if(rr)
    message(FATAL_ERROR "Failed to extract symbols (${rr})")
endif()

string(REPLACE "\n" ";" syms "${syms}")

set(postfixes # ORDERED list for symbols suffixes
    0 1 1s 2 2s 3 3s 4 4s 5 5s
    rootfs 6 6s 7 7s)

# Pass1: Pickup symbols with "__initcall__"
set(initsyms)
set(delayedsyms)
foreach(n ${syms})
    if(${n} MATCHES "__initcall__")
        if(${n} MATCHES "__initcall__kmod_vhci_hcd__")
            list(APPEND delayedsyms ${n})
        else()
            list(APPEND initsyms ${n})
        endif()
    endif()
endforeach()

# Pass2: generate symlist for each postfixes
foreach(p ${postfixes})
    foreach(n ${initsyms})
        if(${n} MATCHES "${p}$")
            message(STATUS "${p}: ${n}")
            list(APPEND syms_${p} ${n})
        endif()
    endforeach()
endforeach()

# Pass3: Sort(concat) symlist
set(totalsyms)
foreach(p ${postfixes})
    LIST(APPEND totalsyms ${syms_${p}})
endforeach()

# Pass4: Generate initcall_listsym
set(initcall_externs)
set(initcall_listsym "")
set(initcall_listsym_nonfirst)
foreach(p ${totalsyms} ${delayedsyms})
    set(initcall_externs "${initcall_externs}extern initcall_t ${p};\n")
    if(initcall_listsym_nonfirst)
        set(nonfirst_comma ",")
    else()
        set(nonfirst_comma "")
        set(initcall_listsym_nonfirst ON)
    endif()
    set(initcall_listsym "${initcall_listsym}\n\t${nonfirst_comma}${p}")
endforeach()

# Pass5: Generate offsets
set(offs_points 0 1 2 3 4 5 6 7)
set(offs_split_0 0)
set(offs_split_1 1 1s)
set(offs_split_2 2 2s)
set(offs_split_3 3 3s)
set(offs_split_4 4 4s)
set(offs_split_5 5 5s)
set(offs_split_6 rootfs 6 6s)
set(offs_split_7 7 7s)


foreach(s ${offs_points})
    set(reg 0)
    foreach(l ${offs_split_${s}})
        list(LENGTH syms_${l} len)
        math(EXPR reg "${reg}+${len}")
    endforeach()
    set(len_${s} ${reg})
endforeach()

# Pass6: Adjust array length to multiple of N (M bytes align)
# FIXME: Are we okay to rely on __attribute__((aligned (4))) and 
#        remove padding?
foreach(s ${offs_points})
    math(EXPR rlen_${s} "${len_${s}}%32")
endforeach()


# Output

file(WRITE ${output} "/* Autogenerated. Do not edit. */\n#include<stddef.h>\ntypedef int (*initcall_t)(void);\n\n${initcall_externs}\n\n")

file(APPEND ${output} "initcall_t __attribute__((aligned (4))) __initcall0_start[${len_0}+${rlen_0}];\n")
file(APPEND ${output} "initcall_t __attribute__((aligned (4))) __initcall1_start[${len_1}+${rlen_1}];\n")
file(APPEND ${output} "initcall_t __attribute__((aligned (4))) __initcall2_start[${len_2}+${rlen_2}];\n")
file(APPEND ${output} "initcall_t __attribute__((aligned (4))) __initcall3_start[${len_3}+${rlen_3}];\n")
file(APPEND ${output} "initcall_t __attribute__((aligned (4))) __initcall4_start[${len_4}+${rlen_4}];\n")
file(APPEND ${output} "initcall_t __attribute__((aligned (4))) __initcall5_start[${len_5}+${rlen_5}];\n")
file(APPEND ${output} "initcall_t __attribute__((aligned (4))) __initcall6_start[${len_6}+${rlen_6}];\n")
file(APPEND ${output} "initcall_t __attribute__((aligned (4))) __initcall7_start[${len_7}+${rlen_7}];\n")
file(APPEND ${output} "initcall_t __attribute__((aligned (4))) __initcall_end[1];\n")

file(APPEND ${output} "static int init_do_nothing(void){return 0;}\n")
file(APPEND ${output} "void *memcpy(void *dest, const void *src, size_t n);\nvoid host_lkl_inittbl(void) {\n size_t n,off;\nconst initcall_t final_initcalls[] = {${initcall_listsym},init_do_nothing};\n")
file(APPEND ${output} "off = 0; memcpy(__initcall0_start, &final_initcalls[off], ${len_0}*4); for(n=${len_0};n!=${len_0}+${rlen_0};n++){__initcall0_start[n] = init_do_nothing;}\n")
file(APPEND ${output} "off += ${len_0}; memcpy(__initcall1_start, &final_initcalls[off], ${len_1}*4); for(n=${len_1};n!=${len_1}+${rlen_1};n++){__initcall1_start[n] = init_do_nothing;}\n")
file(APPEND ${output} "off += ${len_1}; memcpy(__initcall2_start, &final_initcalls[off], ${len_2}*4); for(n=${len_2};n!=${len_2}+${rlen_2};n++){__initcall2_start[n] = init_do_nothing;}\n")
file(APPEND ${output} "off += ${len_2}; memcpy(__initcall3_start, &final_initcalls[off], ${len_3}*4); for(n=${len_3};n!=${len_3}+${rlen_3};n++){__initcall3_start[n] = init_do_nothing;}\n")
file(APPEND ${output} "off += ${len_3}; memcpy(__initcall4_start, &final_initcalls[off], ${len_4}*4); for(n=${len_4};n!=${len_4}+${rlen_4};n++){__initcall4_start[n] = init_do_nothing;}\n")
file(APPEND ${output} "off += ${len_4}; memcpy(__initcall5_start, &final_initcalls[off], ${len_5}*4); for(n=${len_5};n!=${len_5}+${rlen_5};n++){__initcall5_start[n] = init_do_nothing;}\n")
file(APPEND ${output} "off += ${len_5}; memcpy(__initcall6_start, &final_initcalls[off], ${len_6}*4); for(n=${len_6};n!=${len_6}+${rlen_6};n++){__initcall6_start[n] = init_do_nothing;}\n")
file(APPEND ${output} "off += ${len_6}; memcpy(__initcall7_start, &final_initcalls[off], ${len_7}*4); for(n=${len_7};n!=${len_7}+${rlen_7};n++){__initcall7_start[n] = init_do_nothing;}\n")
file(APPEND ${output} "off += ${len_7}; memcpy(__initcall_end, &final_initcalls[off], 1*4);\n}")

file(APPEND ${output} "extern initcall_t __attribute__((alias (\"__initcall0_start\"))) __initcall_start[${len_0}];\n")
